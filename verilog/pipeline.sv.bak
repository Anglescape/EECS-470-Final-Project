/////////////////////////////////////////////////////////////////////////
//                                                                     //
//   Modulename :  pipeline.sv                                         //
//                                                                     //
//  Description :  Top-level module of the verisimple pipeline;        //
//                 This instantiates and connects the 5 stages of the  //
//                 Verisimple pipeline together.                       //
//                                                                     //
/////////////////////////////////////////////////////////////////////////

`include "verilog/sys_defs.svh"

module pipeline (
    input        clock,             // System clock
    input        reset,             // System reset
    input [3:0]  mem2proc_response, // Tag from memory about current request
    input [63:0] mem2proc_data,     // Data coming back from memory
    input [3:0]  mem2proc_tag,      // Tag from memory about current reply

    output logic [1:0]       proc2mem_command, // Command sent to memory
    output logic [`XLEN-1:0] proc2mem_addr,    // Address sent to memory
    output logic [63:0]      proc2mem_data,    // Data sent to memory
`ifndef CACHE_MODE // no longer sending size to memory
    output MEM_SIZE          proc2mem_size,    // Data size sent to memory
`endif

    // Note: these are assigned at the very bottom of the module
    output logic [3:0]       pipeline_completed_insts,
    output EXCEPTION_CODE    pipeline_error_status,
    output logic [4:0]       pipeline_commit_wr_idx,
    output logic [`XLEN-1:0] pipeline_commit_wr_data,
    output logic             pipeline_commit_wr_en,
    output logic [`XLEN-1:0] pipeline_commit_NPC,

    // Debug outputs: these signals are solely used for debugging in testbenches
    // Do not change for project 3
    // You should definitely change these for project 4
    // output logic [`XLEN-1:0] if_NPC_dbg,
    // output logic [31:0]      if_inst_dbg,
    // output logic             if_valid_dbg,
    // output logic [`XLEN-1:0] if_id_NPC_dbg,
    // output logic [31:0]      if_id_inst_dbg,
    // output logic             if_id_valid_dbg,
    // output logic [`XLEN-1:0] id_ex_NPC_dbg,
    // output logic [31:0]      id_ex_inst_dbg,
    // output logic             id_ex_valid_dbg,
    // output logic [`XLEN-1:0] ex_mem_NPC_dbg,
    // output logic [31:0]      ex_mem_inst_dbg,
    // output logic             ex_mem_valid_dbg,
    // output logic [`XLEN-1:0] mem_wb_NPC_dbg,
    // output logic [31:0]      mem_wb_inst_dbg,
    // output logic             mem_wb_valid_dbg
);

    //////////////////////////////////////////////////
    //                                              //
    //                Pipeline Wires                //
    //                                              //
    //////////////////////////////////////////////////

    // Pipeline register enables
    logic if_dp_enable, dp_rs_enable, rs_enable, ex_mem_enable, mem_wb_enable;

    // RS table
    RS_PACKET rs_packet [`RS_SIZE-1:0];
    RS_PACKET rs_packet_one;
    logic [$clog2(`RS_SIZE)-1:0] tag

    // Outputs from IF-Stage and IF/ID Pipeline Register
    logic [`XLEN-1:0] proc2Imem_addr;
    IF_DP_PACKET if_packet, if_dp_reg;

    // Outputs from Dispatch stage and DP/ Pipeline Register
    DP_RS_PACKET dp_packet, dp_is_reg;

    // Output from RS and RS/IS Pipeline Register
    RS_IS_PACKET rs_packet;
    /*
    // Outputs from EX-Stage and EX/MEM Pipeline Register
    EX_MEM_PACKET ex_packet, ex_mem_reg;

    // Outputs from MEM-Stage and MEM/WB Pipeline Register
    MEM_WB_PACKET mem_packet, mem_wb_reg;
    */

    // Outputs from MEM-Stage to memory
    logic [`XLEN-1:0] proc2Dmem_addr;
    logic [`XLEN-1:0] proc2Dmem_data;
    logic [1:0]       proc2Dmem_command;
    MEM_SIZE          proc2Dmem_size;

    // Outputs from WB-Stage (These loop back to the register file in ID)
    logic             wb_regfile_en;
    logic [4:0]       wb_regfile_idx;
    logic [`XLEN-1:0] wb_regfile_data;

    //////////////////////////////////////////////////
    //                                              //
    //                Memory Outputs                //
    //                                              //
    //////////////////////////////////////////////////

    // these signals go to and from the processor and memory
    // we give precedence to the mem stage over instruction fetch
    // note that there is no latency in project 3
    // but there will be a 100ns latency in project 4

    always_comb begin
        if (proc2Dmem_command != BUS_NONE) begin // read or write DATA from memory
            proc2mem_command = proc2Dmem_command;
            proc2mem_addr    = proc2Dmem_addr;
`ifndef CACHE_MODE
            proc2mem_size    = proc2Dmem_size;  // size is never DOUBLE in project 3
`endif
        end else begin                          // read an INSTRUCTION from memory
            proc2mem_command = BUS_LOAD;
            proc2mem_addr    = proc2Imem_addr;
`ifndef CACHE_MODE
            proc2mem_size    = DOUBLE;          // instructions load a full memory line (64 bits)
`endif
        end
        proc2mem_data = {32'b0, proc2Dmem_data};
    end

    //////////////////////////////////////////////////
    //                                              //
    //                 Fetch                        //
    //                                              //
    //////////////////////////////////////////////////

    logic if_valid = 1'b1; // set it to high at the beginning
    stage_if stage_if_0(
        // Inputs
        .clock (clock),
        .reset (reset),
        .if_valid       (next_if_valid),
        .take_branch    (ex_mem_reg.take_branch),
        .branch_target  (ex_mem_reg.alu_result),
        .Imem2proc_data (mem2proc_data),

        // Outputs
        .if_packet      (if_packet),
        .proc2Imem_addr (proc2Imem_addr)
    );

    assign if_dp_enable = 1'b1;
    always_ff @(posedge clock) begin
        if (reset) begin
            if (reset) begin
                if_dp_reg.inst  <= `NOP;
                if_dp_reg.valid <= `FALSE;
                if_dp_reg.NPC   <= 0;
                if_dp_reg.PC    <= 0;
            end
        end else if (if_dp_enable) begin
            if_id_reg <= if_packet
        end
    end

    //////////////////////////////////////////////////
    //                                              //
    //                    Dispatch                  //
    //                                              //
    //////////////////////////////////////////////////

    stage_dp stage_dp_0(
        // input
        .clock(clock),
        .reset(reset),
        .if_dp_reg_in(if_dp_reg),
        
        .wb_regfile_en_in(wb_regfile_en),
        .wb_regfile_idx_in(wb_regfile_idx),
        .wb_regfile_data_in(wb_regfile_data),

        // output
        .dp_packet_out(dp_packet)
    );

    rs rs_0(
        // input
        .clock(clock),
        .reset(reset),
        .dp_packet_in(dp_packet),

        // output
        .rs_packet_out(rs_packet_one)
    );

    assign tag = rs_packet_one.tag;
    always_ff @(posedge clock) begin
        if (reset) begin
            // RS
            for (int i=0; i<`RS_SIZE; i++) begin
                rs_packet[i] <= {
                    1'b0,                     // Busy
                    `NOP,                     // Inst
                    `ZERO_REG,                // R
                    {$clog2(`RS_SIZE){1'b0}}, // tag
                    {`XLEN{1'b0}},            // rs1_value
                    {`XLEN{1'b0}},            // rs2_value
                    {`XLEN{1'b0}},            // PC
                    {`XLEN{1'b0}},            // NPC
                    OPA_IS_RS1,               // opa
                    OPB_IS_RS2,               // opb
                    ALU_ADD,                  // alu_func
                    1'b0,                     // rd_mem
                    1'b0,                     // wr_mem
                    1'b0,                     // cond
                    1'b0,                     // uncond
                    1'b0,                     // halt
                    1'b0,                     // illegal
                    1'b0,                     // csr_op
                    1'b0                      // valid

                };
            end

            // Issue Reg
            dp_is_reg <= {
                `NOP,                     // Inst
                {`XLEN{1'b0}},            // PC
                {`XLEN{1'b0}},            // NPC
                {`XLEN{1'b0}},            // rs1_value
                {`XLEN{1'b0}},            // rs2_value
                OPA_IS_RS1,               // opa
                OPB_IS_RS2,               // opb
                `ZERO_REG,                // destination
                ALU_ADD,                  // alu_func
                1'b0,                     // rd_mem
                1'b0,                     // wr_mem
                1'b0,                     // cond
                1'b0,                     // uncond
                1'b0,                     // halt
                1'b0,                     // illegal
                1'b0,                     // csr_op
                1'b0                      // valid
            }
        end else begin
            // Busy 
            if (rs_packet[tag].busy) begin
                dp_is_reg <= {
                    `NOP,                     // Inst
                    {`XLEN{1'b0}},            // PC
                    {`XLEN{1'b0}},            // NPC
                    {`XLEN{1'b0}},            // rs1_value
                    {`XLEN{1'b0}},            // rs2_value
                    OPA_IS_RS1,               // opa
                    OPB_IS_RS2,               // opb
                    `ZERO_REG,                // destination
                    ALU_ADD,                  // alu_func
                    1'b0,                     // rd_mem
                    1'b0,                     // wr_mem
                    1'b0,                     // cond
                    1'b0,                     // uncond
                    1'b0,                     // halt
                    1'b0,                     // illegal
                    1'b0,                     // csr_op
                    1'b0                      // valid
                }
            end else begin
                 
            end
        end
    end
    //////////////////////////////////////////////////
    //                                              //
    //               Pipeline Outputs               //
    //                                              //
    //////////////////////////////////////////////////

    assign pipeline_completed_insts = {3'b0, mem_wb_reg.valid}; // commit one valid instruction
    assign pipeline_error_status = mem_wb_reg.illegal        ? ILLEGAL_INST :
                                   mem_wb_reg.halt           ? HALTED_ON_WFI :
                                   (mem2proc_response==4'h0) ? LOAD_ACCESS_FAULT : NO_ERROR;

    assign pipeline_commit_wr_en   = wb_regfile_en;
    assign pipeline_commit_wr_idx  = wb_regfile_idx;
    assign pipeline_commit_wr_data = wb_regfile_data;
    assign pipeline_commit_NPC     = mem_wb_reg.NPC;

endmodule // pipeline
